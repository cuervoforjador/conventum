import{helperUtils as e}from"./helperUtils.js";import{helperAction as t}from"./helperAction.js";import{helperSocket as o}from"./helperSocket.js";import{backCombat as a}from"../objects/backCombat.js";import{helperSheets as s}from"./helperSheets.js";import{helperBackend as i}from"./helperBackend.js";import{helperArmor as l}from"./helperArmor.js";import{helperMessages as n}from"./helperMessages.js";export class helperCombat{static dialogCreateCombat(t){if(!game.user.isGM)return;let o=`<formHeader>${game.i18n.localize("common.createCombat")}</formHeader>`,a=`<formElement>
                                <formfield>
                                    <label>${game.i18n.localize("common.name")}</label>
                                    <input type="text" id="name" name="name" required
                                           value="${game.i18n.localize("common.encounter")}"></input>
                                </formfield>
                             </formElement>`,s=[""];game.actors.forEach(e=>{!s.find(t=>t===e.folder?.id)&&e.folder&&s.push(e.folder.id)}),s.sort(e.byName);let i="<formFolders>";s.map(e=>{let t=""!==e?game.folders.get(e).name:game.i18n.localize("common.base");i+=`<formFolder data-folder="${e}">
                            <input type="checkbox" 
                                   name="folder_${e}"
                                   id="folder_${e}"
                                   data-target="actors" />
                            <label for="folder_${e}">${t}</label>
                         </formFolder>`}),i+="</formFolders>";let l="<formActors>";e.allActors().map(e=>{let t=e.folder?e.folder.id:"";l+=`<formActor data-folder="${t}" style="display:none">
                            <img for="combatant_${e.id}_${e.token?.id}"
                                 class="_portrait" src="${e.img}" />
                            <input type="checkbox"
                                   id="combatant_${e.id}_${e.token?.id}"
                                   name="combatant_${e.id}_${e.token?.id}"
                                   actorid="${e.id}"
                                   tokenid="${e.token?.id}"/>                                
                            <label for="combatant_${e.id}_${e.token?.id}">
                                    ${e.isToken?e.token.name:e.name}</label>
                        </formActor>`}),l+="</formActors>";let n=new Dialog({title:game.i18n.localize("common.createCombat"),content:"<formDialog>"+o+a+i+l+"</formDialog>",buttons:{create:{label:game.i18n.localize("common.create"),async callback(e,o){let a=[];$(e).find("formActors").find("input:checked").each(function(e,t){a.push({actorId:$(t).attr("actorid"),tokenId:"undefined"!==$(t).attr("tokenid")?$(t).attr("tokenid"):void 0})}),t?helperCombat.completeCombat($(e).find("formelement input#name").val(),a,t):helperCombat.createCombat($(e).find("formelement input#name").val(),a)}}}});n.options.classes=["dialog","_formDialog"],n.render(!0,{top:"5%"})}static async createEmptyCombat(){if(!game.user.isGM)return;let e=await Combat.create({scene:game.scenes.active?.id});await e?.activate({render:!0}),ui.combat.initialize({combat:e}),game.combat?.startCombat()}static async createCombat(e,t){if(!game.user.isGM)return;let a=await helperCombat.downTokenToTable(t),s=[];for(var i of a)s.push({actorId:i.actorId,tokenId:i.id,sceneId:game.scenes.active.id});let l=await Combat.create({scene:game.scenes.active?.id,combatants:s});await l?.activate({render:!0}),ui.combat.initialize({combat:l}),game.combat?.startCombat(),await helperCombat.createEncounter(l._id,e),o.refreshAllSheets()}static async completeCombat(e,t,a){game.user.isGM&&a&&(await helperCombat.createEncounter(a._id,e),this.addCombatants(a,t),await a?.activate({render:!0}),ui.combat.initialize({combat:a}),game.combat?.startCombat(),o.refreshAllSheets())}static postDeleteCombat(e){if(!game.user.isGM)return;let t=game.items.find(t=>"encounter"===t.type&&t.system.combat===e.id);t&&(t.delete(),o.refreshAllSheets())}static async changeCombat(e){if(!game.user.isGM||!game.combat)return;let t=new CombatTracker,a=t.combats.findIndex(e=>e.id===game.combat.id),s=t.combats.length;(a+="prev"===e?-1:1)<0||a>=s||(await t.combats[a].activate(),o.refreshAllSheets())}static async deleteCombat(){game.user.isGM&&game.combat&&(await game.combat.delete(),o.refreshAllSheets())}static dialogAddCombatant(){if(!game.user.isGM)return;let t=`<formHeader>${game.i18n.localize("common.addCombatant")}</formHeader>`,a=[""];game.actors.forEach(e=>{!a.find(t=>t===e.folder?.id)&&e.folder&&a.push(e.folder.id)}),a.sort(e.byName);let s="<formFolders>";a.map(e=>{let t=""!==e?game.folders.get(e).name:game.i18n.localize("common.base");s+=`<formFolder data-folder="${e}">
                            <input type="checkbox" 
                                   name="folder_${e}"
                                   id="folder_${e}"
                                   data-target="actors" />
                            <label for="folder_${e}">${t}</label>
                         </formFolder>`}),s+="</formFolders>";let i="<formActors>";e.allActors().map(e=>{let t=e.folder?e.folder.id:"";i+=`<formActor data-folder="${t}" style="display:none">
                            <img for="combatant_${e.id}_${e.token?.id}"
                                 class="_portrait" src="${e.img}" />
                            <input type="checkbox"
                                   id="combatant_${e.id}_${e.token?.id}"
                                   name="combatant_${e.id}_${e.token?.id}"
                                   actorid="${e.id}"
                                   tokenid="${e.token?.id}"/>                                
                            <label for="combatant_${e.id}_${e.token?.id}">
                                    ${e.isToken?e.token.name:e.name}</label>
                        </formActor>`}),i+="</formActors>";let l=new Dialog({title:game.i18n.localize("common.addCombatant"),content:"<formDialog>"+t+s+i+"</formDialog>",buttons:{create:{label:game.i18n.localize("common.create"),async callback(e,t){let a=[];$(e).find("formActors").find("input:checked").each(function(e,t){a.push({actorId:$(t).attr("actorid"),tokenId:"undefined"!==$(t).attr("tokenid")?$(t).attr("tokenid"):void 0})}),await helperCombat.addCombatants(game.combat,a),o.refreshAllSheets()}}}});l.options.classes=["dialog","_formDialog"],l.render(!0,{top:"5%"})}static async addCombatants(e,t){if(!game.user.isGM||!e)return;let o=await helperCombat.downTokenToTable(t),a=[];o.map(t=>{e.combatants.size>0&&e.combatants.find(e=>e.token.id===t.id&&e.token.actorId===t.actorId)||a.push({actorId:t.actorId,tokenId:t.id,sceneId:game.scenes.active.id})});let s=await getDocumentClass("Combatant").implementation.createDocuments(a,{parent:e}),i=[];s.map(e=>{i.push({id:e.id,mod:"+0"})});let l=game.items.find(t=>"encounter"===t.type&&t.system.combat===e.id);l&&await l.update({"system.combatants":[...l.system.combatants,...i]})}static async deleteCombatant(e){if(!game.user.isGM)return;await game.combat.combatants.get(e)?.delete();let t=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);await t.update({"system.combatants":t.system.combatants.filter(t=>t.id!==e)}),o.refreshAllSheets()}static async postCreateCombatant(e){if(!game.user.isGM)return;let t=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);t&&(t.system.combatants.find(t=>t.id===e.id)||(t.system.combatants.push({id:e.id,mod:"+0"}),await t.update({"system.combatants":t.system.combatants}),o.refreshAllSheets()))}static async postDeleteCombatant(e){if(!game.user.isGM)return;let t=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);t&&(await t.update({"system.combatants":t.system.combatants.filter(t=>t.id!==e.id)}),o.refreshAllSheets())}static async openCombatantSheet(e){await e.actor.sheet.render(!0);let t=e.actor.sheet;t.activeTab="combat",await t.render(!0,{focus:!0})}static async createEncounter(e,t){if(!game.user.isGM)return;let o=game.combats.get(e);if(!o)return;let a=[];o.combatants.map(e=>{a.push({id:e.id,mod:"+0"})}),await Item.create([{name:""!==t?t:game.i18n.localize("common.encounter"),type:"encounter",img:"systems/"+game.system.id+"/assets/icons/combat.svg",system:{combat:e,combatants:a}}])}static postDeleteEncounter(e){let t=game.combats.get(e.system.combat);t&&(t.delete(),o.refreshAllSheets())}static async changeEncounterName(e){if(!game.combat)return;let t=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);t&&(await t.update({name:e}),o.refreshAllSheets())}static updateRollEncounter(e){if(!e||!e._step?.id||!game.combat)return;let t=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!t)return;let s=t.system.steps.findIndex(t=>t.id===e._step.id),i=t.system.steps[s];if(!i)return;let r=helperCombat.getAntiStep(i),d=new a(e._actor,{systemData:e._actor.system},e._actor.sheet),c=d?._fluxStep;d?._turn.flux;let m="",p=!0,f=t.system.steps.find(e=>e.targetStepId===i.targetStepId&&e.id!==i.id&&!e.active),u={multiDefense:!!(i.type.defense&&t.system.steps.filter(e=>e.targetStepId===i.targetStepId&&e.id!==i.id).length>0),firstStep:!!(i.type.defense&&t.system.steps.filter(e=>e.targetStepId===i.targetStepId&&e.id!==i.id&&e.active).length>0),secondStep:!!(i.type.defense&&f)};if("roll"!==e._fluxId||u.multiDefense||(i.roll.skill=!0,i.roll.flux.push(c),m="roll_skill"),"roll"===e._fluxId&&u.multiDefense)m=u.firstStep?"roll_firstSkill":u.secondStep?"roll_skill":"";else if("oppo"===e._fluxId&&e._oppoRoll.rolling){let y=helperCombat.getAntiStep(e._step),b="";if(e._oppoRoll.attackerTurn&&(i.roll.oppoA=!0,m="roll_oppoA",b="attacker"),e._oppoRoll.defenderTurn&&(i.roll.oppoD=!0,m="roll_oppoD",b="defender"),""===b)return;i.oppoRoll[b]={...i.oppoRoll[b],rolled:!0,formula:d._oppoRoll.stats[b],expression:d._oppoRoll[b].expression,base:d._oppoRoll[b].percent,mod:d._oppoRoll[b].custoMod,total:d._oppoRoll[b].total,result:e._result.nResult,success:e._result.result.success},i.oppoRoll.fromAttacker=d._oppoRoll.fromAttacker,i.oppoRoll.fromDefender=d._oppoRoll.fromDefender,i.oppoRoll.attacker.rolled&&i.oppoRoll.defender.rolled&&(i.oppoRoll.attacker.lost=!i.oppoRoll.attacker.success||!!i.oppoRoll.defender.success&&i.oppoRoll.attacker.result<=i.oppoRoll.defender.result,i.oppoRoll.attacker.win=!!i.oppoRoll.attacker.success&&(!i.oppoRoll.defender.success||i.oppoRoll.attacker.result>i.oppoRoll.defender.result),i.oppoRoll.defender.lost=!i.oppoRoll.defender.success||!!i.oppoRoll.attacker.success&&i.oppoRoll.defender.result<i.oppoRoll.attacker.result,i.oppoRoll.defender.win=!!i.oppoRoll.defender.success&&(!i.oppoRoll.attacker.success||i.oppoRoll.defender.result>=i.oppoRoll.attacker.result),i.oppoRoll.finish=!0,i.oppoRoll.victory=i.oppoRoll.attacker.win?"attacker":i.oppoRoll.defender.win?"defender":"",i.oppoRoll.finish&&i.oppoRoll.defender.win&&(i.active=!1,i.closed=!0,i.rolled=!0,y&&(y.active=!1,y.closed=!0,y.rolled=!0))),i.roll.flux.push(c),y&&(y.roll.oppoA=i.roll.oppoA,y.roll.oppoD=i.roll.oppoD,y.oppoRoll=i.oppoRoll,y.roll.flux.push(c))}else if("damage"===e._fluxId){let g=i.roll.flux.find(e=>"damage"===e.id);if(g||(g=c),p=!1,"damage"===e._target&&(g.rolledDamage=!0,i.damage.initial.rolled=!0,i.damage.initial.formula=d._damageRoll.roll.final,i.damage.initial.result=e._result.nResult),"location"===e._target||"damage"===e._target&&""!==i.damage.location.key){g.rolledLocation=!0,i.damage.location.rolled=!0,i.damage.location.formula=d._damageRoll.location.locationFormula,i.damage.location.result=e._result.nResult;let h=""!==i.damage.location.key?l.getLocationByKey(d._target.actor,i.damage.location.key):l.getLocationByRoll(d._target.actor,e._result.nResult),k=""!==i.damage.location.key?l.getArmorByKey(d._target.actor,i.damage.location.key):l.getArmorByRoll(d._target.actor,e._result.nResult);i.damage.location.initial.protection=k?.system.protection,i.damage.location.initial.endurance=k?.system.endurance,i.damage.location.itemId=k?.id,i.damage.location.key=h?h.key:"",i.damage.location.damage.protection=k?i.damage.initial.result>k.system.protection?k.system.protection:i.damage.initial.result:0}i.roll.flux.find(e=>"damage"===e.id)||i.roll.flux.push(g),"hits"===e._target&&(i.roll.damage=!0,g.last=!0,p=!0,m="roll_damage",i.damage.hits=d._damageRoll.hits,i.active=!1,i.closed=!0,i.rolled=!0,r&&(r.active=!1,r.closed=!0,r.rolled=!0))}if(c.attacker&&e._action&&""!==e._action?.system.weapon.damage.location){let I=l.getArmorByKey(d._target.actor,e._action.system.weapon.damage.location);i.damage.location.initial.protection=I?.system.protection,i.damage.location.initial.endurance=I?.system.endurance,i.damage.location.itemId=I?.id,i.damage.location.key=e._action.system.weapon.damage.location}let v=!u.multiDefense&&d._turnAction?.system.weapon.damage.bothWeapons&&e._result.result.success;if(v&&(m="roll_firstSkill",u.multiDefense=!0,u.firstStep=!0),""!==m&&(i[m]={id:e._fluxId,anti:e._roll.anti,result:e._result,roll:e._roll,rollLevel:e._rollLevel},delete i[m].result.roll),("roll"===e._fluxId&&i.type.attack&&!e._result.result.success||"roll"===e._fluxId&&i.type.defense&&(e._result.result.success||u.multiDefense)||"oppo"===e._fluxId&&i.oppoRoll.finish&&i.oppoRoll.attacker.lost||c.last)&&p){if(i&&(i.active=!1,i.closed=!0,i.rolled=!0,i.multiDefense={...i.multiDefense,...u}),this.postUpdateRollEncounter(i,r,e,t,d),i.type.defense&&0===t.system.steps.filter(e=>e.targetStepId===r.id&&!e.closed).length&&(!u.multiDefense&&!v||f&&f.roll_firstSkill?.result.result.success&&e._result.result.success)&&(r.active=!1,r.closed=!0,r.rolled=!0),!u.multiDefense&&!v&&e._action?.system.defense.inactiveAttacks.sameAttacker){let _=t.system.steps.filter(e=>e.round===i.round&&e.targetId===i.combatantId&&e.id!==i.id&&e.combatantId===r?.combatantId);_.length>0&&(_.map(e=>{e.active=!1,e.closed=!0,e.rolled=!0}),n.chatMessage(game.i18n.localize("info.inactiveAttacks1")))}if(!u.multiDefense&&e._action?.system.defense.inactiveAttacks.allAttacks){let w=t.system.steps.filter(e=>e.round===i.round&&e.targetId===i.combatantId&&e.id!==i.id);w.length>0&&(w.map(e=>{e.active=!1,e.closed=!0,e.rolled=!0}),n.chatMessage(game.i18n.localize("info.inactiveAttacks2")))}t.system.steps.filter(e=>e.targetStepId===i.id).map(e=>{e.active=!1,e.closed=!0,e.rolled=!0})}o.updateEncounter(t,{"system.steps":t.system.steps})}static async postUpdateRollEncounter(e,t,o,a,s){if(o._action?.system.type.defense&&o._action?.system.defense.comparingWeapons&&s._turnWeapon&&s._antiturnWeapon){let i=0;try{i=CONFIG.ExtendConfig.weapons.weaponSizes[s._turnWeapon?.system.size]?.size-CONFIG.ExtendConfig.weapons.weaponSizes[s._antiturnWeapon?.system.size]?.size}catch(l){i=0}i>=2&&n.chatMessage(game.i18n.localize("info.comparingWeapons"))}}static calcInitiativeMod(t,o,a,s){let i={mod:"+0",base:"+0",init:"+0",text:"",textBase:""};if(!t||!o||!a)return;let l=""!==a.actor.system.control.combat.weapon.main?a.actor.items.get(a.actor.system.control.combat.weapon.main):null,n=""!==a.actor.system.control.combat.weapon.second?a.actor.items.get(a.actor.system.control.combat.weapon.second):null,r=o.system.steps?.filter(e=>e.combatantId===a.id&&e.round===t.round),d=0===r.filter(e=>!e.active).length,c=l?d?l.system.initiative.first:l.system.initiative.after:"",m=n?d?n.system.initiative.first:n.system.initiative.after:"";i.text+=("+0"!==e.checkMod(c)?l.name+": "+e.checkMod(c):"")+"\n"+("+0"!==e.checkMod(m)?n.name+": "+e.checkMod(m):""),i.mod=e.sumMods([i.mod,c,m]),i.base=i.mod,i.textBase=i.text;let p=game.settings.get(game.system.id,"rulesPenInit");if(0!==Number(p)){let f=0,u=0;if(void 0===s)u=f=o.system.steps.filter(e=>e.combatantId===a.id&&e.round===game.combat.round&&(""===e.actionId||!a.actor.items.get(e.actionId)||!a.actor.items.get(e.actionId).system.noInitiativePenals)&&(e.closed||!e.active)).length;else{let y=0;o.system.steps.filter(e=>e.combatantId===a.id&&e.round===game.combat.round).map(e=>{!(u>=s)&&(!a.actor.items.get(e.actionId)?.system.noInitiativePenals&&y++,u++)}),f=y}f>0&&(i.init=e.checkMod(f*Number(p)),i.mod=e.sumMods([i.mod,i.init]),i.text+=`</br>${game.i18n.localize("common.turn")} ${u+1}: 
                                ${e.checkMod(f*Number(p))}`)}let b=o.system.steps.filter(e=>e.round===game.combat.round&&e.combatantId===a.id&&e.active&&e.type.attack);if(b.length>0){let g=b[0],h=a.actor.items.get(g.actionId),k=h?h.system.initiative:0;Number(k)>0&&(i.text+=h.name+": "+e.checkMod(k),i.mod=e.sumMods([i.mod,e.checkMod(k)]))}return i}static calcInitiativeSkillMod(t,o,a,s){let i=o.system.steps.filter(e=>e.round===t.round).findIndex(e=>e.id===a);if(i<0)return"+0";let l=o.system.steps.slice(0,i).filter(e=>e.combatantId===s.id&&!e.active).length;return e.checkMod(l*game.settings.get(game.system.id,"rulesPenSkill"))}static async changeInitiativeMod(t,a){if(!game.combat||!game.user.isGM)return;let s=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id),i=s.system.combatants.find(e=>e.id===t);i&&(i.mod=e.checkMod(a),await s.update({"system.combatants":s.system.combatants}),o.refreshAllSheets())}static async rollInitiative(e){if(!game.combat)return;let t=game.combat.combatants.get(e);await t.rollInitiative(),o.refreshAllSheets()}static async resetInitiatives(){game.combat&&game.user.isGM&&(await game.combat.resetAll(),o.refreshAllSheets())}static async changeRound(e){game.user.isGM&&game.combat&&("prev"===e?await game.combat.previousRound():await game.combat.nextRound(),o.refreshAllSheets())}static async addTurn(o){if(!game.combat)return;let a=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!a)return;let s=game.combat.combatants.get(o.system.control.selection.combatant)?.actor;if(!s)return;let i=s.items.get(o.system.control.selection.action);if(!i){e.dialog("",game.i18n.localize("info.noActionSelected"));return}i.system.type.defense?t.dialogSelectTargetAction(s,i,this._postAddTurn):i.system.flow.useTarget?t.dialogSelectTarget(s,i,this._postAddTurn):this._postAddTurn(s,i,null,null)}static _postAddTurn(e,t,a,s=null,i=null){if(!game.combat)return;let l=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!l)return;let n=game.combat.getCombatantsByActor(e)[0];if(!n)return;let r=0;r=game.settings.get(game.system.id,"rulesNewActionsPrev")?l.system.steps.findIndex(e=>e.round===game.combat.round):l.system.steps.findLastIndex(e=>e.round===game.combat.round)+1;let d=0,c=0;l.system.steps.map(e=>{e.combatantId!==n.id||e.round!==game.combat.round||e.type.defense||(c=d),d++}),c>0&&(r=c+1),t.system.type.defense&&i&&(r=l.system.steps.findIndex(e=>e.id===i.id)+1),l.system.steps.splice(r,0,helperCombat.newTurn(e,t,a,s,i));l.system.steps.filter(e=>e.type.defense).map(e=>{l.system.steps=l.system.steps.filter(t=>t.id!==e.id);let t=l.system.steps.findIndex(t=>t.id===e.targetStepId)+1;l.system.steps.splice(t,0,e)}),o.updateEncounter(l,{"system.steps":l.system.steps})}static newTurn(t,o,a,s,i=null){let l=game.combat.getCombatantsByActor(t)[0];if(l)return{round:game.combat.round,combatantId:l.id,actionId:o?o.id:"",targetId:a?a.id:"",targetActionId:s?s.id:"",targetStepId:i?i.id:"",type:{attack:!!o&&o.system.type.attack,defense:!!o&&o.system.type.defense,movement:!!o&&o.system.type.movement,fencing:!!o&&o.system.type.fencing},id:e.generateID(),active:!0,roll:{skill:!1,oppoA:!1,oppoD:!1,damage:!1,flux:[]},oppoRoll:{attacker:{rolled:!1,formula:"",expression:"",base:0,mod:"+0",total:0,result:0,success:!1,win:!1,lost:!1},defender:{rolled:!1,formula:"",expression:"",base:0,mod:"+0",total:0,result:0,success:!1,win:!1,lost:!1},fromAttacker:!1,fromDefender:!1,finish:!1,victory:""},damage:{initial:{rolled:!1,formula:"",result:0},location:{key:o?o.system.weapon.damage.location:"",roll:""===o?.system.weapon.damage.location,rolled:!1,formula:""!==o?.system.weapon.damage.locationFormula?o?.system.weapon.damage.locationFormula:"",result:0,itemId:"",initial:{endurance:0,protection:0},damage:{protection:0}},hits:0},rolled:!1,result:{result:null,roll:null,rollLevel:null},mod:{custo:"+0",oppoAttacker:"+0",oppoDefender:"+0",damage:"+0",mods:[]},multiDefense:{multiDefense:!1,firstStep:!1,secondStep:!1},closed:!1}}static dropTurn(e,t){if(!game.combat||!game.user.isGM)return;let a=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!a)return;let s=[];$(e.target).find("._step").each((e,t)=>{let o=a.system.steps.find(e=>e.id===$(t).data("id"));o&&s.push(o)});s.filter(e=>e.type.defense).map(e=>{let t=(s=s.filter(t=>t.id!==e.id)).findIndex(t=>t.id===e.targetStepId)+1;s.splice(t,0,e)}),o.updateEncounter(a,{"system.steps":s})}static async setTurn(e,t){if(!game.combat)return;let o=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!o)return;let a=o.system.steps.find(e=>e.id===t);a&&await e.update({"system.control.selection":{...e.system.control.selection,combatant:a.combatantId,action:a.actionId}})}static orderStepsBar(t){if(!game.combat||!game.user.isGM)return;let a=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!a)return;let s=[];t.find("._stepsBar").find("._step").each((e,t)=>{s.push({id:$(t).data("id"),initiative:$(t).data("initiative")})});let i=[];(s=s.sort(e.byInitiative)).map(e=>{let t=a.system.steps.find(t=>t.id===e.id);t&&i.push(t)});i.filter(e=>e.type.defense).map(e=>{let t=(i=i.filter(t=>t.id!==e.id)).findIndex(t=>t.id===e.targetStepId)+1;i.splice(t,0,e)}),o.updateEncounter(a,{"system.steps":i})}static deleteTurn(e){if(!game.combat||!game.user.isGM)return;let t=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!t)return;let a=t.system.steps.find(t=>t.id===e),s=t.system.steps.filter(t=>t.id!==e);s=s.filter(e=>e.targetStepId!==a.id),o.updateEncounter(t,{"system.steps":s})}static activeTurn(e,t){if(!game.combat||!game.user.isGM)return;let a=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!a)return;let s=a.system.steps.find(t=>t.id===e);s&&(s.active=t,a.system.steps.filter(e=>e.targetStepId===s.id).map(e=>{e.active=t}),o.updateEncounter(a,{"system.steps":a.system.steps}))}static getAntiStep(e){if(!e)return;let t=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!t)return;let o=t.system.steps,a=o.find(t=>t.targetStepId===e.id);return a||(a=o.find(t=>t.id===e.targetStepId)),a}static async changeCombatCustoMod(t,a,s=!1){if(!game.combat||!game.user.isGM)return;let i=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!i)return;let l=i.system.steps.find(e=>e.id===t);l&&(s?l.mod.damage=e.checkDiceMod(a):l.mod.custo=e.checkMod(a),o.updateEncounter(i,{"system.steps":i.system.steps}))}static async changeOppoCustoMod(t,a,s){if(!game.combat||!game.user.isGM)return;let i=game.items.find(e=>"encounter"===e.type&&e.system.combat===game.combat.id);if(!i)return;let l=i.system.steps.find(e=>e.id===t);l&&("attacker"===a&&(l.mod.oppoAttacker=e.checkMod(s)),"defender"===a&&(l.mod.oppoDefender=e.checkMod(s)),o.updateEncounter(i,{"system.steps":i.system.steps}))}static dialogAddModifiers(t){let a=`<formHeader>${game.i18n.localize("common.selectModifiers")}</formHeader>`,s=[];for(var i in CONFIG.ExtendConfig.combatModsGroups)s.push({id:i,label:game.i18n.localize(CONFIG.ExtendConfig.combatModsGroups[i].label),index:CONFIG.ExtendConfig.combatModsGroups[i].index});s.sort(e.byIndex);let l='<formFolders class="_short">';s.map(e=>{l+=`<formFolder data-folder="${e.id}">
                            <input type="checkbox" 
                                   name="folder_${e.id}"
                                   id="folder_${e.id}"
                                   data-target="items" />
                            <label for="folder_${e.id}">${e.label}</label>
                         </formFolder>`}),l+="</formFolders>";let n='<formItems data-singular="true">';CONFIG.ExtendConfig.combatMods.map(e=>{n+=`<formItem data-folder='["${e.group}"]' style="display:none" class="_modFormItem">
                            <div class="_row">
                                <input type="checkbox"
                                    id="item_${e.index}"
                                    name="item_${e.index}"
                                    itemid="${e.index}" />                                
                                <label for="item_${e.index}">${game.i18n.localize(e.label)}</label>
                            </div>
                            <div class="_comboAtDef">
                                ${""!==e.attack?"<label>"+game.i18n.localize("common.attack")+": "+e.attack+"%</label>":""}
                                ${""!==e.defense?"<label>"+game.i18n.localize("common.defense")+": "+e.defense+"%</label>":""}
                            </div>
                            <div class="_descr">${game.i18n.localize(e.descr)}</div>
                        </formItem>`}),n+="</formItems>";let r=new Dialog({title:game.i18n.localize("common.selectModifiers"),content:"<formDialog>"+a+l+n+"</formDialog>",buttons:{select:{label:game.i18n.localize("common.select"),async callback(e,a){let s=[];if($(e).find("formItems").find("input:checked").each(function(e,t){s.push({itemId:$(t).attr("itemid")})}),0===s.length)return;let i=game.items.find(e=>e.system.combat===game.combat.id);if(!i)return;let l=i.system.steps.find(e=>e.id===t);if(!l)return;let n=s[0].itemId;l.mod.mods.find(e=>e===n)||(l.mod.mods.push(n),o.updateEncounter(i,{"system.steps":i.system.steps}))}}}});r.options.classes=["dialog","_formDialog"],r.render(!0,{top:"5%"})}static deleteCombatModifier(e,t){let a=game.items.find(e=>e.system.combat===game.combat.id);if(!a)return;let s=a.system.steps.find(t=>t.id===e);s&&(s.mod.mods=s.mod.mods.filter(e=>e!==t),o.updateEncounter(a,{"system.steps":a.system.steps}))}static defineCombatLocation(e,t,a){let s=game.items.find(e=>e.system.combat===game.combat.id);if(!s)return;let l=s.system.steps.find(e=>e.id===t);if(!l)return;l.damage.location.key=a,l.damage.location.roll=!1;let n=i.configLocations(!1,e),r=n.find(e=>e.key===a);if(r){let d=CONFIG.ExtendConfig.combatMods.find(e=>e.index===r.mod);d&&""!==d&&!l.mod.mods.find(e=>e===r.mod)&&l.mod.mods.push(r.mod)}o.updateEncounter(s,{"system.steps":s.system.steps})}static async downTokenToTable(e){if(!game.user.isGM)return;let t=[],o={},a=0;for(;o;)o=Array.from(game.scenes.active.tokens).find(e=>0===e.y&&e.x===a),a+=game.scenes.active.grid.size;for(var s of(a=a>0?a-100:a,e)){let i=s.tokenId?game.scenes.active.tokens.find(e=>e.id===s.tokenId).getActor():game.actors.get(s.actorId),l=i.getActiveTokens();if(l.length>0){let n=!1;if(l.map(e=>{e.actor.token?.id===s.tokenId&&(t.push(e.document),n=!0)}),n)continue}new Dialog({title:game.i18n.localize("common.combat"),content:game.i18n.localize("info.newToken").replace("#1",i.name),buttons:{},classes:["dialog","_formDialog"]}).render(!0),game.canvas.pan({x:0,y:0});let r={actorId:i.id,actorLink:!0,texture:i.prototypeToken.texture,alpha:1,bar1:{attribute:"secondaries.hits"},bar2:{attribute:"attributes.initiative"},displayBars:50,displayName:50,width:1,x:a,y:0,parent:game.scenes.active},d=await getDocumentClass("Token").implementation.createDocuments([r],{parent:game.scenes.active});t.push(d[0]),a+=game.scenes.active.grid.size}return t}}