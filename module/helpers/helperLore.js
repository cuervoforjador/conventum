import{helperUtils as e}from"./helperUtils.js";import{helperBackend as o}from"./helperBackend.js";export class helperLore{static async checkLore(e){let t="",s=o.configRules(),l=await o.getFromCompendium("context",!1),i=await o.getCompendiumLanguages(!1),r=0;for(var a of s){t+=`<h1>${++r}. ${a.name}</h1>`;let n=0,m=l.filter(e=>"loreKingdom"===e.type&&e.system.control.rules===a.key);for(var c of(t+=`<div class="_mainCombo">
                         <h2 class="_mainH2">${game.i18n.localize("common.kingdoms")}</h2>
                         <div class="_mainBox">`,m.length>0&&m.sort((e,o)=>e.system.roll.from<o.system.roll.from?-1:e.system.roll.from>o.system.roll.from?1:0),m)){t+=`<h2>${r}.${++n}. 
                                [${c.system.roll.from} - ${c.system.roll.to}] ${c.name}</h2>`,t+=helperLore.checkKey(l,c),t+='<div class="_box">';let y=0,d=[];for(var f of(c.system.nations.sort((e,o)=>e.rollFrom<o.rollFrom?-1:e.rollFrom>o.rollFrom?1:0),c.system.nations.map(e=>{d.push(l.find(o=>"loreNation"===o.type&&o.system.control.key===e.key))}),d)){y++;let h=c.system.nations.find(e=>e.key===f.system.control.key);t+=`<h2>[${h.rollFrom} - ${h.rollTo}] ${f.name}</h2>`,t+=helperLore.checkKey(l,f),t+='<div class="_box">';let p=0,k=[];for(var g of(f.system.languages.map(e=>{k.push(i.find(o=>o.system.control.key===e.key))}),k))p++,t+=`<label>${game.i18n.localize("common.language")} ${g.name}</label>`,t+=helperLore.checkKey(i,g);t+="</div>"}t+="</div>"}0===m.length&&(t+=`<p>${game.i18n.localize("info.noKingdoms")}</p>`),t+="</div></div>";let v=0;t+=`<div class="_mainCombo">
                            <h2 class="_mainH2">${game.i18n.localize("common.societies")}</h2>
                            <div class="_mainBox">`;let u=l.filter(e=>"loreSociety"===e.type&&e.system.control.rules===a.key);for(var _ of u){t+=`<h2>${r}.${++v}. ${_.name}</h2>`,t+=helperLore.checkKey(l,_),t+='<div class="_box">';let C=0,b=l.filter(e=>"loreStratum"===e.type&&e.system.society===_.system.control.key&&e.system.control.rules===a.key);for(var x of b){t+=`<h2>${r}.${v}.${++C}. ${x.name}</h2>`,t+=helperLore.checkKey(l,x),t+=`<div class="_mainCombo">
                                <h2 class="_mainH2">${game.i18n.localize("common.positions")}</h2>
                                <div class="_mainBox">`;let z=0,L=l.filter(e=>"lorePosition"===e.type&&e.system.control.rules===a.key&&e.system.society===_.system.control.key&&e.system.stratum===x.system.control.key);for(var w of(L.length>0&&L.sort((e,o)=>e.system.roll.from<o.system.roll.from?-1:e.system.roll.from>o.system.roll.from?1:0),L))z++,t+=`<h3>[${w.system.roll.from} - ${w.system.roll.to}] ${w.name}</h3>`,t+=helperLore.checkKey(l,w);0===L.length&&(t+=`<p>${game.i18n.localize("info.noPositions")}</p>`),t+="</div></div>",t+=`<div class="_mainCombo">
                                <h2 class="_mainH2">${game.i18n.localize("common.professions")}</h2>
                                <div class="_mainBox">`;let F=0,K=l.filter(e=>"loreProfession"===e.type&&e.system.control.rules===a.key&&e.system.stratums.find(e=>e.key===x.system.control.key));for(var T of(K.length>0&&K.sort((e,o)=>{let t=e.system.stratums.find(e=>e.key===x.system.control.key)?.rollFrom,s=o.system.stratums.find(e=>e.key===x.system.control.key)?.rollTo;return t<s?-1:t>s?1:0}),K)){F++;let D=T.system.stratums.find(e=>e.key===x.system.control.key);t+=`<h3>[${D.rollFrom} - ${D.rollTo}] ${T.name}</h3>`,t+=helperLore.checkKey(l,T)}0===K.length&&(t+=`<p>${game.i18n.localize("info.noProfessions")}</p>`),t+="</div></div>"}t+="</div>"}0===u.length&&(t+=`<p>${game.i18n.localize("info.noSocieties")}</p>`),t+="</div></div>"}let I=new Dialog({title:game.i18n.localize("common.checkLore"),content:"<formDialog>"+t+"</formDialog>",buttons:{}});I.options.classes=["dialog","_formDialog","_checking","_checkLore"],I.render(!0)}static checkKey(e,o){let t=`<div class="_entryCheckKey">
            ${game.i18n.localize("common.key")}: ${o.system.control.key}, 
            &nbsp;<a class="showContextItem" data-id="${o.id}">id: ${o.id} (${o.name})</a> - 
            &nbsp;${game.i18n.localize("info.keyCorrect")}
        </div>`,s=e.filter(e=>e.system.control.key===o.system.control.key&&e.id!==o.id);return s.length>0&&(t=`<div class="_entryCheckKey _repeated">
                          <ol class="_alert">`,t+=`<li>
                ${game.i18n.localize("common.key")}: ${o.system.control.key}, 
                &nbsp;<a class="showContextItem" data-id="${o.id}">id: ${o.id} (${o.name})</a> -
                &nbsp;${game.i18n.localize("info.keyRepeated")}  
                &nbsp;<a class="deleteContextItem" data-id="${o.id}"><i class='fas fa-trash-alt'></i></a>
            </li>`,s.map(e=>{t+=`<li>
                    ${game.i18n.localize("common.key")}: ${e.system.control.key}, 
                    &nbsp;<a class="showContextItem" data-id="${e.id}">id: ${e.id} (${e.name})</a> -
                    &nbsp;${game.i18n.localize("info.keyRepeated")}
                    &nbsp;<a class="deleteContextItem" data-id="${e.id}"><i class='fas fa-trash-alt'></i></a>
                </li>`}),t+=`  </ol>
                       </div>`),t}static async onShowContextItem(e){e.preventDefault();let t=(await o.getFromCompendium("context",!1)).find(o=>o.id===$(e.currentTarget).data("id"));t||(t=(await o.getFromCompendium("skills",!1)).find(o=>o.id===$(e.currentTarget).data("id"))),t.sheet.render(!0)}static async onDeleteContextItem(e){e.preventDefault();let t=(await o.getFromCompendium("context",!1)).find(o=>o.id===$(e.currentTarget).data("id"));t||(t=(await o.getFromCompendium("skills",!1)).find(o=>o.id===$(e.currentTarget).data("id"))),$(e.currentTarget).parents(".dialog").remove(),await t.delete(),helperLore.checkLore()}static onClickCombo(e){e.preventDefault(),$(e.currentTarget).parent().find("._mainBox").slideToggle()}}