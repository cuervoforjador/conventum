import{helperUtils as t}from"../helpers/helperUtils.js";import{helperCombat as o}from"../helpers/helperCombat.js";import{helperSocket as e}from"../helpers/helperSocket.js";import{helperBackend as a}from"../helpers/helperBackend.js";import{helperSheets as s}from"../helpers/helperSheets.js";export class backCombat{_actor=null;_sheet=null;_context=null;_systemData=null;_config={badHandMod:null};_scene=null;_combat=null;_combats=[];_encounter=null;_combatants=[];_combatMatrix=[];_myCombatant=null;_steps=[];_step=null;_multiDefense={active:!1,firstStep:null,secondStep:null};_actions=[];_weapons=[];_weaponsInUse={main:null,second:null,singular:!1,diffHands:!1,mainHand:!1,secondHand:!1,empty:!0,useBadHand:!1};_damageBon={base:"",total:"",lifeStatus:"",decreased:!1};_turn={combatant:null,antiCombatant:null,action:null,antiAction:null,step:null,antiStep:null,isMyTurn:!1,isMyAntiturn:!1,isActive:!1,combatMods:[],antiCombatMods:[],flux:[]};_fluxStep=null;_fluxPrevStep=null;_fluxNextStep=null;_fluxDirectSteps={attacker:null,defender:null,damage:null,oppoAttacker:null,oppoDefender:null};_turnActor=null;_turnAction=null;_turnWeapon=null;_turnRoll={anti:!1,title:"",rolled:!1,diffLevels:!0,autoSuccess:!1,formula:"1D100",skill:null,skillData:null,damageRoll:!1,useBadHand:!1,comparingHands:!1,stats:{base:0,mods:{initiative:"+0",weapon:"+0",armor:"+0",attackCritical:"+0",attackPenal:"+0",modifiers:"+0"},bonus:0,penal:0,totalMod:"+0",custoMod:"+0",modList:"",final:0,fromCritical:!1},avalLuck:0,history:[]};_antiturnActor=null;_antiturnAction=null;_antiturnWeapon=null;_antiturnRoll={anti:!0,title:"",rolled:!1,diffLevels:!0,autoSuccess:!1,formula:"1D100",skill:null,skillData:null,damageRoll:!1,useBadHand:!1,comparingHands:!1,stats:{base:0,mods:{initiative:"+0",weapon:"+0",armor:"+0",attackCritical:"+0",attackPenal:"+0",modifiers:"+0"},bonus:0,penal:0,totalMod:"+0",custoMod:"+0",modList:"",final:0},avalLuck:0,history:[]};_target=null;_oppoRoll={turnAttacker:!1,turnDefender:!1,fromAttacker:!1,fromDefender:!1,finish:!1,victory:"",attacker:{fluxStep:null,combatant:null,actor:null,action:null,expression:"",percent:"",bonus:"",penal:"",custoMod:"+0",total:0,totalBar:0,beforeValue:!1,valueBar:0,valueColor:"",rolled:!1,success:!1,result:0,win:!1,lost:!1},defender:{fluxStep:null,combatant:null,actor:null,action:null,expression:"",percent:"",bonus:"",penal:"",custoMod:"+0",total:0,totalBar:0,beforeValue:!1,valueBar:0,valueColor:"",rolled:!1,success:!1,result:0,win:!1,lost:!1},stats:{useOppRoll:!1}};_2handsMode={attacker:{using2hands:!1,mainWeapon:null,secondWeapon:null,mainBase:0,secondBase:0},defender:{using2hands:!1,usingShield:!1,mainWeapon:null,secondWeapon:null,mainBase:0,secondBase:0}};_damageRoll={noDamage:!0,noArmor:!1,own:!1,double:!1,roll:{actionFormula:!1,base:"",damageBon:!0,bon:"+0",mod:"+0",mult:"1",actionMod:"+0",custoMod:"+0",totalMod:"+0",bonus:0,penal:0,final:""},locations:[],location:{key:"",roll:!0,applyLocation:!1,toShield:!1,breakShield:!1,location:null,item:null,itemId:"",locationTitle:"-",locationFormula:"1D10",protectionTitle:"-",protection:0,protectionAbs:0,endurance:0},damageBon:{value:"+0",mod:"+0",mult:1},rolled:{damage:!1,location:!1,hits:!1},available:{damage:!1,location:!1,hits:!1},result:{damage:0,location:0},hits:0,hitsInfo:{text:""}};_turnDisplay={img:"",imgOppo:"",turnOf:"",action:"",oppoRoll:!1,combatant:null,actor:null,warningMe:!1};_summary=[];control={noCombat:!0,noSteps:!0,noCombatants:!0,txtRound:game.i18n.localize("common.noStarted"),showTarget:!1,movement:!1,noWeapons:!1,noMode:!1,noModeTxt:"",attacker:{showWeaponBox:!1,noWeapon:!1,noMode:!1,modeTxt:"",error:!1,waiting:!1},defender:{showWeaponBox:!1,noWeapon:!1,noMode:!1,modeTxt:"",error:!1,waiting:!1},phase:{attacker:!1,defender:!1,damage:!1,oppoRoll:!1,oppoAttacker:!1,oppoDefender:!1}};selection={combatant:null,combatantSelected:!1,action:null,actionSelected:!1,maxSteps:0,totalSteps:0,avalStep:!1,showCount:!0};constructor(t,o,e){this._actor=t,this._sheet=e,this._context=o,this._systemData=o.systemData;try{this._getConfig(),this._getCombats(),this._getCurrentCombat(),this._getCurrentEncounter(),this._getCombatants(),this._getMyCombatant(),this._getCombatMatrix(),this._getSelectionCombatant(),this._getSteps(),this._getTurn(),this._getDamageBon(),this._getWeapons(),this._getWeaponsInUse(),this._getActions(),this._getSelectionAction(),this._getTurnFlux(),this._getControl(),this._getSummary()}catch(a){ui.notifications.error(a)}}_getTurnFlux(){this._combat&&this._turn&&this._turn.step&&(this._getTurnActor(),this._getTurnAction(),this._getTurnWeapon(),this._get2HandsMode(),this._getFlux(),this._setCurrentDisplayStep(),this._checkRequirements(),this._getOppoRoll(),this._getDamageRoll(),this._getTurnRoll(),this._getTurnCombatMods(),this._getTurnRollMods(),this._getTurnRollFinal(),this._getTurnDisplay())}_getConfig(){this._config.badHandMod=CONFIG.ExtendConfig.combatMods.find(t=>t.index===CONFIG.ExtendConfig.combatConfig.badHandID)}_getCombats(){Array.from(game.combats).map(t=>{this._combats.push({combat:t,encounter:game.items.find(o=>"encounter"===o.type&&o.system.combat===t.id)})})}_getCurrentCombat(){this._scene=game.scenes.active,this._scene&&(this._combat=game.combat,this._combat&&!this._combat.active&&game.user.isGM&&this._combat.activate({render:!0}))}_getCurrentEncounter(){this._combat&&(this._encounter=game.items.find(t=>"encounter"===t.type&&t.system.combat===this._combat.id))}_getCombatants(){this._combat&&this._encounter&&(this._combatants=Array.from(this._combat.combatants))}_getMyCombatant(){this._combat&&this._encounter&&0!==this._combatants.length&&(this._myCombatant=this._combat.getCombatantByActor(this._actor))}_getCombatMatrix(){this._combat&&this._encounter&&(this._combatants.map(e=>{let a=o.calcInitiativeMod(this._combat,this._encounter,e);this._combatMatrix.push({combatant:e,base:e.actor.system.characteristics.agi.value,roll:e.initiative?e.initiative:0,rolled:!!e.initiative,mod0:a.mod,mod0Txt:a.text,mod:t.checkMod(this._encounter.system.combatants.find(t=>t.id===e.id)?.mod),total:0})}),this._combatMatrix.map(t=>{t.total=Number(t.base)+Number(t.roll)+Number(t.mod0)+Number(t.mod)}),this._combatMatrix.sort((t,o)=>o.total-t.total))}_getSelectionCombatant(){if(!this._combat||!this._encounter){this._systemData.control.selection.combatant="";return}game.user.isGM?(this.selection.combatant=this._combatants.find(t=>t.id===this._systemData.control.selection.combatant),this.selection.combatant||(this._systemData.control.selection.combatant=this._myCombatant?this._myCombatant.id:"",this.selection.combatant=this._myCombatant?this._myCombatant:null)):(this.selection.combatant=this._myCombatant?this._myCombatant:null,this._systemData.control.selection.combatant=this.selection.combatant?.id),this.selection.combatantSelected=!!this.selection.combatant}_getSelectionAction(){if(!this._combat||!this._encounter){this._systemData.control.selection.action="";return}let t=this._combat.combatants.get(this._systemData.control.selection.combatant);t&&(this.selection.action=t.actor.items.find(t=>"action"===t.type&&t.id===this._systemData.control.selection.action),this.selection.action||(this._systemData.control.selection.action=""),this.selection.actionSelected=!!this.selection.action,this.selection.maxSteps=game.settings.get(game.system.id,"rulesMaxSteps"),this.selection.totalSteps=this.selection.action?this.selection.action.system.flow.steps:0,this._steps.filter(t=>t.round===game.combat.round&&t.combatantId===this._systemData.control.selection.combatant).map(t=>{this.selection.totalSteps+=t.action.system.flow.steps}),this.selection.avalStep=0===this.selection.maxSteps||this.selection.totalSteps<=this.selection.maxSteps,this.selection.showCount=0!==this.selection.maxSteps)}_getSteps(){this._combat&&this._encounter&&this._encounter.system.steps.map(t=>{let e=this._combat.combatants.get(t.combatantId);if(!e)return;let a=e.actor.items.get(t.actionId);if(!a)return;let s=this._combat.combatants.get(t.targetId),l=this._steps.filter(t=>t.combatant.id===e.id&&t.round===this._combat.round).length,i=this._combatMatrix.find(t=>t.combatant.id===e.id),n=o.calcInitiativeMod(this._combat,this._encounter,e,l),r=Number(i.base)+Number(i.mod)+Number(i.roll)+Number(n.mod),d=n.text,c=this._encounter.system.steps.find(o=>o.targetStepId===t.id),m=this._encounter.system.steps.find(o=>o.id===t.targetStepId),h=!!t.roll_skill||!!t.roll_firstSkill,p=!!h&&(t.roll_skill?t.roll_skill.result.result.success:!!t.roll_firstSkill&&t.roll_firstSkill.result.result.success),u=!p&&!!h&&(t.roll_skill?t.roll_skill.result.result.failure:!!t.roll_firstSkill&&t.roll_firstSkill.result.result.failure);this._steps.push({...t,combatant:e,target:s,action:a,initiative:r,mod0Txt:d,showTxt:0!==Number(n.mod),current:!1,isAttacker:!!c,isDefender:!!m,rolled:h,success:p,failed:u,showResult:!t.active&&h})})}_getTurn(){if(!this._combat||(this._steps.length,0)||0===this._steps.filter(t=>t.round===this._combat.round&&t.active).length)return;let t=this._steps.filter(t=>t.round===this._combat.round&&t.active)[0];if(!t)return;let o=this._steps.find(o=>o.round===t.round&&o.targetStepId===t.id&&o.active);this._turn={...this._turn,combatant:t.combatant,antiCombatant:o?o.combatant:t.target?.id?game.combat.combatants.get(t.target?.id):null,action:t.action,antiAction:o?o.action:null,step:t,antiStep:o,isMyTurn:t.combatant.id===this._myCombatant?.id,isMyAntiturn:o?.combatant.id===this._myCombatant?.id,isActive:!0},t.current=!0,this._multiDefense.firstStep=this._steps.find(o=>o.targetStepId===t?.id&&o.multiDefense.firstStep),this._multiDefense.secondStep=this._steps.find(o=>o.targetStepId===t?.id&&o.multiDefense.secondStep),this._multiDefense.active=!!this._multiDefense.firstStep&&!!this._multiDefense.secondStep}_getDamageBon(){let t=Object.keys(this._systemData.lifeStatus).map(t=>this._systemData.lifeStatus[t]).find(t=>t.acquired);this._damageBon={...this._damageBon,base:s.getDamageBon(this._systemData,!0),total:s.getDamageBon(this._systemData),lifeStatus:game.i18n.localize(t?.i18n),decreased:t?.coef!==1}}_getWeapons(){this._actor&&(this._weapons=Array.from(this._actor.items).filter(t=>"weapon"===t.type))}_getWeaponsInUse(){if(!this._actor||0===this._weapons.length)return;let t=this._systemData.control.combat.weapon.main,o=this._systemData.control.combat.weapon.second;t&&""!==t&&(this._weaponsInUse.main=this._actor.items.get(t),this._weaponsInUse.main||(this._systemData.control.combat.weapon.main="")),o&&""!==o&&(this._weaponsInUse.second=this._actor.items.get(o),this._weaponsInUse.second?this._systemData.control.combat.weapon.main===this._systemData.control.combat.weapon.second&&(this._systemData.control.combat.weapon.second="",this._weaponsInUse.second=null):this._systemData.control.combat.weapon.second=""),this._weaponsInUse.main?.system.twoHands?(this._weaponsInUse={...this._weaponsInUse,second:null,singular:!0,diffHands:!1,mainHand:!1,secondHand:!1,empty:!1},this._systemData.control.combat.weapon.second=this._systemData.control.combat.weapon.main):this._weaponsInUse={...this._weaponsInUse,singular:!1,diffHands:!!this._weaponsInUse.second,mainHand:!!this._weaponsInUse.main,secondHand:!!this._weaponsInUse.second,empty:!this._weaponsInUse.main&&!this._weaponsInUse.second}}_getActions(){this._actor&&(this._actions=Array.from(this._actor.items).filter(t=>"action"===t.type),this._actions.sort(t.byName))}_getTurnActor(){this._turnActor=this._turn.combatant?this._turn.combatant.actor:this._turnActor,this._antiturnActor=this._turn.antiCombatant?this._turn.antiCombatant.actor:this._antiturnActor,this._antiturnActor||(this._antiturnActor=this._turn.step.target?.actor)}_getTurnAction(){this._turnAction=this._turn.action?this._turn.action:this._turnAction,this._antiturnAction=this._turn.antiAction?this._turn.antiAction:this._antiturnAction}_getTurnWeapon(){[{actor:this._turnActor,action:this._turnAction,weapon:this._turnWeapon,roll:this._turnRoll,anti:!1},{actor:this._antiturnActor,action:this._antiturnAction,weapon:this._antiturnWeapon,roll:this._antiturnRoll,anti:!0}].map(o=>{if(!o.actor||!o.action)return;let e=o.actor.system.control.combat.weapon,a=o.action.system.roll.twoHands,s=""!==e.main?o.actor.items.get(e.main):null,l=""!==e.second?o.actor.items.get(e.second):null,i=o.actor.system.skills[s?.system.skillkey],n=o.actor.system.skills[l?.system.skillkey];if(o.weapon=a.usePrimary?s:a.useSecondary?l:null,a.useShield&&(o.weapon=s?.system.shield?s:l?.system.shield?l:null),a.useLower&&s&&l||a.useSecondary&&a.usePenalLower){let r=a.usePenalLower?o.action.system.type.defense?this._config.badHandMod.defense:this._config.badHandMod.attack:"+0";l&&l.system.shield?(o.roll.useBadHand=!1,o.weapon=o.action.system.weapon.priorShields?l:t.calcValueTotal(n)<t.calcValueTotal(i)?l:s):(o.roll.useBadHand=!!a.useSecondary||Number(t.calcValueTotal(n)+Number(r))<t.calcValueTotal(i),o.weapon=o.roll.useBadHand?l:s),o.roll.comparingHands=!0}if(!o.weapon&&a.useLower&&(o.weapon=s||l),!o.action.system.weapon.bothWeapons||s&&l||(o.weapon=null),o.action.system.roll.restrictWeapons){let d=o.action.system.skill.skillKey;o.weapon=s?.system.skillkey===d?s:l?.system.skillkey===d?l:null}o.action?.system.weapon.onlyRangeWeapons&&(o.weapon=s?.system.rangearm?s:l?.system.rangearm?l:s?.system.firearm?s:l?.system.firearm?l:s?.system.throwarm?s:l?.system.throwarm?l:null),o.action.system.weapon.bySize1&&s&&!o.action.system.weapon.sizes1[s.system.size].check&&o.weapon?.id===s.id&&(o.weapon=null),o.action.system.weapon.bySize2&&l&&!o.action.system.weapon.sizes2[l.system.size].check&&o.weapon?.id===l.id&&(o.weapon=null),o.actor.system.modes.find(t=>"melee"===t)&&o.weapon&&!o.weapon.system.melee&&(o.weapon=null),o.weapon?this._addRollHistory("common.weapon",o.weapon.name):this._addRollHistory("info.noWeapons"),o.anti?this._antiturnWeapon=o.weapon:this._turnWeapon=o.weapon})}_get2HandsMode(){this._2handsMode.attacker={...this._2handsMode.attacker,mainWeapon:this._turnActor?.system.control.combat.weapon.main?this._turnActor.items.get(this._turnActor.system.control.combat.weapon.main):null,secondWeapon:this._turnActor?.system.control.combat.weapon.second?this._turnActor.items.get(this._turnActor.system.control.combat.weapon.second):null},this._2handsMode.defender={...this._2handsMode.defender,mainWeapon:this._antiturnActor?.system.control.combat.weapon.main?this._antiturnActor.items.get(this._antiturnActor.system.control.combat.weapon.main):null,secondWeapon:this._antiturnActor?.system.control.combat.weapon.second?this._antiturnActor.items.get(this._antiturnActor.system.control.combat.weapon.second):null},this._2handsMode.attacker.using2hands=!this._2handsMode.attacker.mainWeapon?.system.twoHands&&this._turnRoll.comparingHands,this._2handsMode.defender.using2hands=!this._2handsMode.defender.mainWeapon?.system.twoHands&&this._antiturnRoll.comparingHands,this._2handsMode.defender.usingShield=!!this._2handsMode.attacker.secondWeapon?.system.shield,this._2handsMode.attacker.mainBase=this._2handsMode.attacker.mainWeapon?t.calcValueTotal(this._turnActor?.system.skills[this._2handsMode.attacker.mainWeapon.system.skillkey]):0,this._2handsMode.attacker.secondBase=this._2handsMode.attacker.secondWeapon?t.calcValueTotal(this._turnActor?.system.skills[this._2handsMode.attacker.secondWeapon.system.skillkey]):0,this._2handsMode.defender.mainBase=this._2handsMode.defender.mainWeapon?t.calcValueTotal(this._antiturnActor?.system.skills[this._2handsMode.defender.mainWeapon.system.skillkey]):0,this._2handsMode.defender.secondBase=this._2handsMode.defender.secondWeapon?t.calcValueTotal(this._antiturnActor?.system.skills[this._2handsMode.defender.secondWeapon.system.skillkey]):0}_getFlux(){let t=this._turnAction.system,o=this._antiturnAction?.system,e=this._turn.step,a=this._turn.antiStep;if(!t)return;t.type.movement&&this._addFlux({id:"move",attacker:!0},e),t.opposedRoll.anticipate&&t.flow.useOppoRoll&&this._addFlux({id:"oppo",attacker:!0,oppoRoll:!0},e),t.flow.useRoll&&this._addFlux({id:"roll",attacker:!0,skillRoll:!0},e),!t.opposedRoll.anticipate&&t.flow.useOppoRoll&&this._addFlux({id:"oppo",attacker:!0,oppoRoll:!0},e),o&&(o.type.movement&&this._addFlux({id:"move",defender:!0},a),o.opposedRoll.anticipate&&o.flow.useOppoRoll&&this._addFlux({id:"oppo",attacker:!0,oppoRoll:!0},e),o.flow.useRoll&&this._addFlux({id:"roll",defender:!0,skillRoll:!0,fromDefender:!0},a),!o.opposedRoll.anticipate&&o.flow.useOppoRoll&&this._addFlux({id:"oppo",attacker:!0,oppoRoll:!0},e)),t?.flow.useDamage&&this._addFlux({id:"damage",defender:!0,damageRoll:!0},e),o?.flow.useDamage&&this._addFlux({id:"damage",attacker:!0,damageRoll:!0,fromDefender:!0},a),this._turn.flux.length>0&&(this._turn.flux[this._turn.flux.length-1].last=!0);let s=this._turn.flux.find(t=>!t.rolled);s&&(s.current=!0,s.visible=!0);let l=this._turn.flux.findIndex(t=>t.current),i=l>-1?this._turn.flux[l+1]:null,n=l>0?this._turn.flux[l-1]:null;s&&i&&("oppo"===s.id&&"oppo"===i.id&&(i.visible=!s.anti),"roll"===s.id&&"roll"===i.id&&(i.visible=!s.anti),"roll"===s.id&&"damage"===i.id&&(i.visible=!s.anti)),s&&n&&("oppo"===s.id&&"oppo"===n.id&&(n.visible=s.anti),"roll"===s.id&&"roll"===n.id&&(n.visible=s.anti),"roll"===s.id&&"damage"===n.id&&(n.visible=s.anti)),this._fluxStep=this._turn.flux.find(t=>t.current),this._fluxStep&&(this._fluxPrevStep=this._turn[this._turn.flux.findIndex(t=>t.current)-1],this._fluxNextStep=this._turn[this._turn.flux.findIndex(t=>t.current)+1]),this._fluxDirectSteps={...this._fluxDirectSteps,attacker:this._turn.flux.find(t=>"roll"===t.id&&t.attacker&&!t.oppoRoll),defender:this._turn.flux.find(t=>"roll"===t.id&&t.defender&&!t.oppoRoll),damage:this._turn.flux.find(t=>"damage"===t.id),oppoAttacker:this._turn.flux.find(t=>"roll"===t.id&&t.attacker&&t.oppoRoll),oppoDefender:this._turn.flux.find(t=>"roll"===t.id&&t.defender&&t.oppoRoll)},this._fluxStep&&this._fluxStep.damageRoll&&(this._fluxStep={...this._fluxStep,action:this._fluxDirectSteps.attacker?.action,actor:this._fluxDirectSteps.attacker?.actor}),this._fluxStep&&"move"===this._fluxStep.id&&(this.control.movement=!0)}_setCurrentDisplayStep(){this._steps.map(t=>{t.currentDisplay=!1});let t=this._steps.find(t=>t.id===this._fluxStep?.stepId);t&&(t.currentDisplay=!0),this._step=t,this._target=this._step?.target}_addFlux(o,e){if(!e)return;let a="";o.oppoRoll&&(o.fromDefender?this._antiturnAction&&(a=t.evalExpression(o.attacker?this._antiturnAction.system.opposedRoll.attacker:o.defender?this._antiturnAction.system.opposedRoll.defender:"",!0,this._antiturnActor,this._antiturnWeapon)):a=t.evalExpression(o.attacker?this._turnAction.system.opposedRoll.attacker:o.defender?this._turnAction.system.opposedRoll.defender:"",!0,this._turnActor,this._turnWeapon)),this._turn.flux.push({id:"",attacker:!1,defender:!1,fromDefender:!1,skillRoll:!1,oppoRoll:!1,damageRoll:!1,stepId:e.id,rolled:"roll"===o.id?e.roll?.skill:"oppo"===o.id&&o.attacker?e.oppoRoll?.attacker.rolled&&e.oppoRoll?.defender.rolled:"oppo"===o.id&&o.defender?e.oppoRoll?.attacker.rolled&&e.oppoRoll?.defender.rolled:"damage"===o.id&&e.roll?.damage,current:!1,last:!1,anti:"oppo"===o.id?!o.fromDefender&&o.defender||o.fromDefender&&o.defender:"roll"===o.id?o.fromDefender:"damage"===o.id&&o.defender,visible:!1,actor:o.attacker?this._turnActor:o.defender?this._antiturnActor:null,action:o.attacker?this._turnAction:o.defender?this._antiturnAction:null,title:{roll:o.skillRoll?game.i18n.localize("common.fluxSkillRoll"):o.oppoRoll?game.i18n.localize("common.fluxOppoRoll"):o.damageRoll?game.i18n.localize("common.fluxDamageRoll"):"",subTitle:a},...o})}_checkRequirements(){this.control.attacker.showWeaponBox=!!this._turnAction&&this._turnAction.system.flow.useWeapon,!this.control.attacker.showWeaponBox||this._turnWeapon||this._step.action?.system.weapon.noWeapons||(this.control.attacker.noWeapon=!0),this.control.defender.showWeaponBox=!!this._antiturnAction&&this._antiturnAction.system.flow.useWeapon,this.control.defender.showWeaponBox&&!this._antiturnWeapon&&(this.control.defender.noWeapon=!0),this.control.attacker.noWeapon&&(this.control.attacker.error=!0,this.control.attacker.waiting=!0),this.control.defender.noWeapon&&(this.control.defender.error=!0,this.control.defender.waiting=!0),this.control.movement&&(this.control.defender.error=!1,this.control.defender.waiting=!1)}_getOppoRoll(){this._combat&&this._encounter&&this._fluxStep?.oppoRoll&&(this._oppoRoll.turnAttacker=this._fluxStep.attacker,this._oppoRoll.turnDefender=this._fluxStep.defender,this._oppoRoll.fromAttacker=!!this._turnAction&&this._turnAction.system.flow.useOppoRoll,this._oppoRoll.fromDefender=!this._oppoRoll.fromAttacker&&!!this._antiturnAction&&this._antiturnAction.system.flow.useOppoRoll,this._oppoRoll.stats=this._oppoRoll.fromAttacker?this._turnAction.system.opposedRoll:this._antiturnAction.system.opposedRoll,this._oppoRoll.attacker.combatant=this._turn.combatant,this._oppoRoll.defender.combatant=this._turn.antiCombatant,this._oppoRoll.attacker.actor=this._turn.combatant?.actor,this._oppoRoll.defender.actor=this._turn.antiCombatant?.actor,this._oppoRoll.attacker.action=this._turn.action,this._oppoRoll.defender.action=this._turn.antiAction,this._oppoRoll.attacker.fluxStep=this._turn.flux.find(t=>"oppo"===t.id&&t.attacker),this._oppoRoll.defender.fluxStep=this._turn.flux.find(t=>"oppo"===t.id&&t.defender),this._oppoRoll.attacker.expression=t.evalExpression(this._oppoRoll.stats.attacker,!0,this._oppoRoll.attacker.actor,this._turnWeapon),this._oppoRoll.attacker.percent=t.evalExpression(this._oppoRoll.stats.attacker,!1,this._oppoRoll.attacker.actor,this._turnWeapon),this._oppoRoll.defender.expression=t.evalExpression(this._oppoRoll.stats.defender,!0,this._oppoRoll.defender.actor,this._antiturnWeapon),this._oppoRoll.defender.percent=t.evalExpression(this._oppoRoll.stats.defender,!1,this._oppoRoll.defender.actor,this._antiturnWeapon),this._oppoRoll.attacker.custoMod=this._turn.step.mod.oppoAttacker,this._oppoRoll.defender.custoMod=this._turn.step.mod.oppoDefender,this._oppoRoll.attacker.bonus=Number(this._oppoRoll.attacker.custoMod)>0?this._oppoRoll.attacker.custoMod:"",this._oppoRoll.attacker.penal=0>Number(this._oppoRoll.attacker.custoMod)?this._oppoRoll.attacker.custoMod:"",this._oppoRoll.defender.bonus=Number(this._oppoRoll.defender.custoMod)>0?this._oppoRoll.defender.custoMod:"",this._oppoRoll.defender.penal=0>Number(this._oppoRoll.defender.custoMod)?this._oppoRoll.defender.custoMod:"",this._oppoRoll.attacker.total=this._oppoRoll.attacker.percent+Number(this._oppoRoll.attacker.custoMod),this._oppoRoll.defender.total=this._oppoRoll.defender.percent+Number(this._oppoRoll.defender.custoMod),this._oppoRoll.attacker.totalBar=this._oppoRoll.attacker.total<0?0:this._oppoRoll.attacker.total>100?100:this._oppoRoll.attacker.total,this._oppoRoll.defender.totalBar=this._oppoRoll.defender.total<0?0:this._oppoRoll.defender.total>100?100:this._oppoRoll.defender.total,this._oppoRoll.attacker.totalPos=this._oppoRoll.attacker.totalBar-10<20?0:this._oppoRoll.attacker.totalBar-10>80?80:this._oppoRoll.attacker.totalBar-20,this._oppoRoll.defender.totalPos=this._oppoRoll.defender.totalBar-10<20?80:this._oppoRoll.defender.totalBar-10>80?20:100-this._oppoRoll.defender.totalBar,["attacker","defender"].map(t=>{this._oppoRoll[t].rolled=this._turn.step.oppoRoll[t].rolled,this._oppoRoll[t].success=this._turn.step.oppoRoll[t].success,this._oppoRoll[t].result=this._turn.step.oppoRoll[t].result,this._oppoRoll[t].win=this._turn.step.oppoRoll[t].win,this._oppoRoll[t].lost=this._turn.step.oppoRoll[t].lost,this._oppoRoll[t].rolled&&(this._oppoRoll[t].beforeValue=!this._oppoRoll[t].success,this._oppoRoll[t].valueBar=this._oppoRoll[t].result>100?100:this._oppoRoll[t].result<0?0:this._oppoRoll[t].result,this._oppoRoll[t].valueColor=this._oppoRoll[t].success?"#ff8d006b":"#ff00006b")}),this._turn.step.oppoRoll.finish)}_getDamageRoll(){if(!this._step||(this._damageRoll.double=this._turnAction?.system.weapon.damage.bothWeapons,this._damageRoll.locations=a.configLocations(!0,this._target?.actor.type),this._damageRoll.location.key=this._step.damage.location.key,this._damageRoll.location.roll=this._step.damage.location.roll,this._damageRoll.location.applyLocation=!!this._turnAction&&this._turnAction.system.weapon.damage.location,this._fluxNextStep?.id==="damage"&&(this._antiturnAction=this._createDamageAction(this._turnActor,this._antiturnActor,this._turnAction,this._antiturnAction,this._turnWeapon,this._antiturnWeapon),this._turn.antiAction=this._antiturnAction,this._antiturnRoll.damageRoll=!0),this._fluxStep?.id!=="damage"))return;if(this._step.action?.system.weapon.damage.noDamage){this._damageRoll.noDamage=!0,this._damageRoll.rolled.damage=!0,this._damageRoll.rolled.location=!0,this._damageRoll.rolled.hits=!1,this._damageRoll.available.hits=!0;return}this._damageRoll.rolled.damage=this._step.damage.initial.rolled,this._damageRoll.rolled.location=this._step.damage.location.rolled,this._damageRoll.rolled.hits=!!this._step.roll_damage,this._damageRoll.result.damage=this._step.damage.initial.result,this._damageRoll.result.location=this._step.damage.location.result,this._turnRoll={...this._turnRoll,damageRoll:!0,diffLevels:!1,formula:""};let o=this._turnAction?.system.weapon.damage;if(!o)return;let e=this._turnWeapon?.system.damage,l=!!this._damageRoll.double&&(!this._multiDefense.firstStep||!!this._multiDefense.firstStep&&this._multiDefense.firstStep.roll_firstSkill?.result.result.failure),i=!!this._damageRoll.double&&(!this._multiDefense.secondStep||!!this._multiDefense.secondStep&&this._multiDefense.secondStep.roll_skill?.result.result.failure),n=(l&&i?this._2handsMode.attacker.mainWeapon?.name+" / ":"")+(l&&!i?this._2handsMode.attacker.mainWeapon?.name:"")+(i?this._2handsMode.attacker.secondWeapon?.name:""),r=(l?this._2handsMode.attacker.mainWeapon?.system.damage.base+" +":"")+(l&&!i?this._2handsMode.attacker.mainWeapon?.system.damage.base:"")+(i?this._2handsMode.attacker.secondWeapon?.system.damage.base:""),d=o.own?this._turnAction?.name:this._damageRoll.double?n:this._turnWeapon?.name,c=o.own&&""!==o.base?o.base:this._damageRoll.double?r:e?.base?e.base:"";this._damageRoll={...this._damageRoll,noDamage:o.noDamage,noArmor:o.noArmor||e?.noArmor,noWeapon:o.own,title:d,roll:{...this._damageRoll.roll,actionFormula:""!==o.base,base:c,damageBon:o.damageBon&&e?.bono,mod:"+0"===o.mod||o.applyPostRoll?"+0":o.mod,custoMod:"+0",mult:"1"===o.mult||o.applyPostRoll?"1":o.mult},location:{...this._damageRoll.location,applyLocation:""!==o.location,location:""!==o.location?o.location:""},damageBon:{...this._damageRoll.damageBon,...this._turnActor?.system.attributes.damage}},void 0===this._damageRoll.roll.base&&(this._damageRoll.roll.base=""),o?.locationFormula!==""&&(this._damageRoll.location.locationFormula=o.locationFormula),s.findModesBy(this._turnActor,"locationRoll").map(t=>{this._damageRoll.location.locationFormula=t.locationRoll}),this._turnAction?.system.weapon.damage.toShield&&(this._damageRoll.location.toShield=!0,this._damageRoll.location.breakShield=!!this._turnAction?.system.weapon.damage.criticalBrokeShield&&this._step.roll_skill?.result.result.criticalSuccess),0!==Number(o.dbLevel)&&(this._damageRoll.damageBon.value=s.getDamageBon(this._systemData,!1,5*Number(o.dbLevel))),this._damageRoll.double&&""!==this._damageRoll.damageBon.value&&l&&i&&(this._damageRoll.damageBon.value=this._damageRoll.damageBon.value[0]+"(("+this._damageRoll.damageBon.value.substring(1)+")*2)"),this._damageRoll.roll.damageBon&&(this._damageRoll.roll.bon=t.calcAlphaValueTotal(this._damageRoll.damageBon).trim(),this._damageRoll.roll.bon="+"!==this._damageRoll.roll.bon[0]||"-"!==this._damageRoll.roll.bon[0]?this._damageRoll.roll.bon:"+"+this._damageRoll.roll.bon,this._damageRoll.double&&(this._damageRoll.roll.bon=this._damageRoll.damageBon.value)),this._damageRoll.roll.actionMod=t.calcAlphaValueTotal({value:game.i18n.localize("common.damage"),mod:this._damageRoll.roll.mod,mult:this._damageRoll.roll.mult}),this._damageRoll.roll.final=t.calcAlphaValueTotal(this._damageRoll.roll),""!==this._damageRoll.roll.bon&&"+0"!==this._damageRoll.roll.bon&&(this._damageRoll.roll.final=this._damageRoll.roll.final+" "+this._damageRoll.roll.bon),o.applyPostRoll&&(this._damageRoll.roll.final=t.calcAlphaValueTotal({value:this._damageRoll.roll.final,mod:o.mod,mult:o.mult})),(this._step.damage.location.rolled||""!==this._step.damage.location.key)&&(this._damageRoll.location.location=this._damageRoll.locations.find(t=>t.key===this._step.damage.location.key),this._damageRoll.rolled.location=!0,this._damageRoll.location.locationFormula=this._damageRoll.location.location.label,this._damageRoll.location.itemId=this._step.damage.location.itemId,this._damageRoll.location.item=this._damageRoll.location.itemId&&""!==this._damageRoll.location.itemId?this._target.actor.items.get(this._damageRoll.location.itemId):null,this._damageRoll.location.locationTitle=this._damageRoll.location.location.label+" (x "+this._damageRoll.location.location.mult+")",this._damageRoll.location.protectionTitle=this._damageRoll.location.item?this._damageRoll.location.item.name:"-",this._damageRoll.location.protection=this._step.damage.location.initial.protection,this._damageRoll.location.endurance=this._step.damage.location.initial.endurance,this._damageRoll.location.protectionAbs=this._step.damage.location.damage.protection,this._damageRoll.result.location=this._step.damage.location.result,this._step.action?.system.weapon.damage.noArmor&&(this._damageRoll.location.protectionTitle=game.i18n.localize("common.noApply"),this._damageRoll.location.protection=0,this._damageRoll.location.endurance=0,this._damageRoll.location.protectionAbs=0),this._damageRoll.hits=Math.ceil((this._damageRoll.result.damage-this._damageRoll.location.protectionAbs)*this._damageRoll.location.location.mult)),this._damageRoll.available.damage=!this._damageRoll.rolled.damage,this._damageRoll.available.location=this._damageRoll.rolled.damage,this._damageRoll.available.hits=this._damageRoll.rolled.location,this._damageRoll.location.toShield&&this._damageRoll.available.location&&(this._damageRoll.available.location=!1,this._damageRoll.available.hits=!0,this._damageRoll.hits=this._damageRoll.result.damage),this._damageRoll.hitsInfo.text=this._damageRoll.available.hits?"( "+this._damageRoll.result.damage+" "+game.i18n.localize("common.damagePoints")+" - "+this._damageRoll.location.protectionAbs+" "+game.i18n.localize("common.protectionAbs")+" ) x "+this._damageRoll.location.location.mult+" = "+this._damageRoll.hits:""}_getTurnRoll(){[{actor:this._turnActor,action:this._turnAction,weapon:this._turnWeapon,roll:this._turnRoll,anti:!1},{actor:this._antiturnActor,action:this._antiturnAction,weapon:this._antiturnWeapon,roll:this._antiturnRoll,anti:!0}].map(o=>{if(o.actor&&o.action&&"damage"!==o.action.id){if(o.roll.diffLevels=o.action.system.roll.useDiffLevels,o.roll.formula=o.action.system.roll.rollFormula,o.roll.autoSuccess=o.action.system.roll.autoSuccess,o.action.system.roll.useSkill||o.action.system.roll.useWeapon&&o.weapon){let e=o.action.system.roll.useSkill?o.action.system.skill.skillKey:o.weapon.system.skillkey;o.action?.system.weapon.onlyRangeWeapons&&o.weapon?.system.throwarm&&(e="throw"),o.roll.skillData=o.actor.system.skills[e],o.roll.skill=o.actor.items.find(t=>"skill"===t.type&&t.system.control.key===e),o.roll.title=o.roll.skill?.name,this._addRollHistory("common.rollBase",o.roll.skill?.name,o.anti),o.roll.stats.base=t.calcValueTotal(o.roll.skillData),this._addRollHistory("common.percentBase",o.roll.stats.base,o.anti)}if(o.action.system.roll.usePercentFormula){let a=t.lookForSkill(o.action.system.percent.formula),l="";if("wpskill"===a)l=o.weapon?.system.skillkey;else if("wpskill2"===a){let i=""!==o.actor.system.control.combat.weapon.second?o.actor.items.get(o.actor.system.control.combat.weapon.second):null;l=i?.system.skillkey}else""!==a&&(l=a);o.roll.skill=""!==l?o.actor.items.find(t=>"skill"===t.type&&t.system.control.key===l):o.roll.skill,o.roll.title=t.evalExpression(o.action.system.percent.formula,!0,o.actor,o.weapon),this._addRollHistory("common.rollBase",o.roll.title,o.anti),o.roll.stats.base=t.evalExpression(o.action.system.percent.formula,!1,o.actor,o.weapon),this._addRollHistory("common.percentBase",o.roll.stats.base,o.anti)}""!==o.action.system.roll.rollTitle&&(o.roll.title=t.evalExpression(o.action.system.roll.rollTitle,!0,o.actor,o.weapon)),s.findModesBy(o.actor,"combatSkill").map(e=>{let a=t.calcValueTotal(o.actor.system.skills[e.combatSkill]);a<o.roll.stats.base&&(o.roll.stats.base=a,o.roll.title=o.actor.items.find(t=>"skill"===t.type&&t.system.control.key===e.combatSkill)?.name)}),o.roll.avalLuck=t.getChar(o.actor.system,"luck"),o.anti?this._antiturnRoll=o.roll:this._turnRoll=o.roll,o.anti?this.control.defender.waiting=!this._fluxStep?.skillRoll||!this._fluxStep?.defender:this.control.attacker.waiting=!this._fluxStep?.skillRoll||!this._fluxStep?.attacker,this.control.movement&&(this.control.attacker.waiting=!1)}})}_getTurnCombatMods(){this._combat&&this._turn&&this._turn.step&&(this._turn.step.mod.mods.map(t=>{let o=CONFIG.ExtendConfig.combatMods.find(o=>o.index===t);o&&this._turn.combatMods.push({...o,label:game.i18n.localize(o.label),descr:game.i18n.localize(o.descr),isAttack:""!==o.attack,isDefense:""!==o.defense})}),this._turn.antiStep&&this._turn.antiStep.mod.mods.map(t=>{let o=CONFIG.ExtendConfig.combatMods.find(o=>o.index===t);o&&this._turn.antiCombatMods.push({...o,label:game.i18n.localize(o.label),descr:game.i18n.localize(o.descr),isAttack:""!==o.attack,isDefense:""!==o.defense})}),this._turnRoll.useBadHand&&this._config.badHandMod&&!this._turn.combatMods.find(t=>t.index===this._config.badHandMod.index)&&this._turn.combatMods.push({...this._config.badHandMod,label:game.i18n.localize(this._config.badHandMod.label),descr:game.i18n.localize(this._config.badHandMod.descr),isAttack:""!==this._config.badHandMod.attack,isDefense:""!==this._config.badHandMod.defense}),this._antiturnRoll.useBadHand&&this._config.badHandMod&&this._turn.antiStep&&!this._turn.antiCombatMods.find(t=>t.index===this._config.badHandMod.index)&&this._turn.antiCombatMods.push({...this._config.badHandMod,label:game.i18n.localize(this._config.badHandMod.label),descr:game.i18n.localize(this._config.badHandMod.descr),isAttack:""!==this._config.badHandMod.attack,isDefense:""!==this._config.badHandMod.defense}))}_getTurnRollMods(){this._combat&&this._encounter&&[{actor:this._turnActor,action:this._turnAction,weapon:this._turnWeapon,roll:this._turnRoll,anti:!1},{actor:this._antiturnActor,action:this._antiturnAction,weapon:this._antiturnWeapon,roll:this._antiturnRoll,anti:!0}].map(e=>{if(!e.actor||!e.action||"damage"===e.action.id)return;let a=e.anti?this._turn.antiStep:this._turn.step,s=o.getAntiStep(a),l=e.anti?this._turn.antiCombatant:this._turn.combatant;e.roll.stats.mods.initiative=o.calcInitiativeSkillMod(this._combat,this._encounter,a.id,l),e.roll.stats.bonus+=Number(e.roll.stats.mods.initiative)>0?Number(e.roll.stats.mods.initiative):0,e.roll.stats.penal+=0>Number(e.roll.stats.mods.initiative)?Number(e.roll.stats.mods.initiative):0,e.roll.stats.mods.weapon=e.anti?this._antiturnWeapon&&this._step?.type.attack&&"+0"!==this._antiturnWeapon.system.skillMod?t.checkMod(this._antiturnWeapon.system.skillMod):this._antiturnWeapon&&this._step?.type.defense&&"+0"!==this._antiturnWeapon.system.skillModDefense?t.checkMod(this._antiturnWeapon.system.skillModDefense):"+0":this._turnWeapon&&this._step?.type.attack&&"+0"!==this._turnWeapon.system.skillMod?t.checkMod(this._turnWeapon.system.skillMod):this._turnWeapon&&this._step?.type.defense&&"+0"!==this._turnWeapon.system.skillModDefense?t.checkMod(this._turnWeapon.system.skillModDefense):"+0",e.roll.stats.bonus+=Number(e.roll.stats.mods.weapon)>0?Number(e.roll.stats.mods.weapon):0,e.roll.stats.penal+=0>Number(e.roll.stats.mods.weapon)?Number(e.roll.stats.mods.weapon):0;let i=e.anti?this._antiturnWeapon&&Number(this._antiturnWeapon.system.strMin)>t.getChar(this._antiturnActor?.system,"str")?(t.getChar(this._antiturnActor?.system,"str")-Number(this._antiturnWeapon.system.strMin))*5:0:this._turnWeapon&&Number(this._turnWeapon.system.strMin)>t.getChar(this._turnActor?.system,"str")?(t.getChar(this._turnActor?.system,"str")-Number(this._turnWeapon.system.strMin))*5:0;i<0&&(e.roll.stats.mods.weapon=t.sumMods([e.roll.stats.mods.weapon,i]),e.roll.stats.penal+=i),e.roll.stats.bonus+=Number(e.roll.stats.mods.armor)>0?Number(e.roll.stats.mods.armor):0,e.roll.stats.penal+=0>Number(e.roll.stats.mods.armor)?Number(e.roll.stats.mods.armor):0,e.anti&&e.action?.system.type.defense&&this._turnAction?.system.defense.penalization.apply&&s&&(e.roll.stats.mods.attackPenal=t.checkMod(Number(-1*t.calcValueTotal({value:e.roll.stats.base,mod:this._turnAction?.system.defense.penalization.mod,mult:this._turnAction?.system.defense.penalization.mult})).toString()),e.roll.stats.bonus+=Number(e.roll.stats.mods.attackPenal)>0?Number(e.roll.stats.mods.attackPenal):0,e.roll.stats.penal+=0>Number(e.roll.stats.mods.attackPenal)?Number(e.roll.stats.mods.attackPenal):0),e.anti&&e.action?.system.type.defense&&e.action?.system.defense.criticalAttack.apply&&s&&s.roll_skill?.result.result.criticalSuccess&&(e.roll.stats.mods.attackCritical=t.checkMod(Number(-1*t.calcValueTotal({value:e.roll.stats.base,mod:e.action?.system.defense.criticalAttack.mod,mult:e.action?.system.defense.criticalAttack.mult})).toString()),e.roll.stats.bonus+=Number(e.roll.stats.mods.attackCritical)>0?Number(e.roll.stats.mods.attackCritical):0,e.roll.stats.penal+=0>Number(e.roll.stats.mods.attackCritical)?Number(e.roll.stats.mods.attackCritical):0);try{e.roll.stats.mods.modifiers=0;let n=e.anti?this._turn.antiCombatMods:this._turn.combatMods;n.map(o=>{let a=e.action.system.type.attack&&o.isAttack?Number(t.checkMod(o.attack)):e.action.system.type.defense&&o.isDefense?Number(t.checkMod(o.defense)):0;e.roll.stats.mods.modifiers+=a,e.roll.stats.bonus+=a>0?a:0,e.roll.stats.penal+=a<0?a:0,e.roll.stats.modList=""===e.roll.stats.modList?o.index:e.roll.stats.modList+","+o.index})}catch(r){e.roll.stats.mods.modifiers="+0"}e.roll.stats.mods.modifiers=t.checkMod(e.roll.stats.mods.modifiers),e.anti?this._antiturnRoll=e.roll:this._turnRoll=e.roll})}_getTurnRollFinal(){this._combat&&this._encounter&&([this._turnRoll,this._antiturnRoll].map(o=>{o.stats.totalMod=t.sumMods([o.stats.mods.initiative,o.stats.mods.weapon,o.stats.mods.armor,o.stats.mods.attackCritical,o.stats.mods.attackPenal,o.stats.mods.modifiers]),o.anti?o.stats.custoMod=this._turn.antiStep?.mod.custo:o.stats.custoMod=this._turn.step.mod.custo,o.stats.bonus+=Number(o.stats.custoMod)>0?Number(o.stats.custoMod):0,o.stats.penal+=0>Number(o.stats.custoMod)?Number(o.stats.custoMod):0,o.stats.bonus=t.checkMod(o.stats.bonus),o.stats.penal=t.checkMod(o.stats.penal),o.stats.final=t.calcValueFinal(o.stats)}),this._fluxStep?.id==="damage"&&(this._turnRoll.stats.custoMod=this._turn.step.mod.damage,""!==this._turnRoll.stats.custoMod&&"+0"!==this._turnRoll.stats.custoMod&&(this._damageRoll.roll.final=this._damageRoll.roll.final+" "+this._turnRoll.stats.custoMod),this._turnRoll.stats.base=this._damageRoll.roll.base,this._turnRoll.stats.totalMod=this._damageRoll.roll.totalMod,this._turnRoll.stats.bonus=this._damageRoll.roll.bonus,this._turnRoll.stats.penal=this._damageRoll.roll.penal,this._turnRoll.stats.final=this._damageRoll.roll.final,this._step.roll_skill?.result.result.criticalSuccess&&(this._turnRoll.stats.fromCritical=!0,this._turnRoll.stats.final=t.evalMaxExpression(this._damageRoll.roll.final))))}_getTurnDisplay(){let t=this._oppoRoll.stats.useOppRoll?this._oppoRoll.attacker.actor:this._fluxStep?.actor;this._turnDisplay={...this._turnDisplay,img:t?.img,imgOppo:this._oppoRoll.stats.useOppRoll?this._oppoRoll.defender.actor?.img:"",turnOf:this._oppoRoll.stats.useOppRoll?this._oppoRoll.attacker.actor?.name+" / "+this._oppoRoll.defender.actor?.name:this._fluxStep?this._fluxStep.actor?.name:this._turnDisplay.turnOf,action:this._oppoRoll.stats.useOppRoll?game.i18n.localize("common.oppoRoll"):this._fluxStep?.damageRoll?this._fluxStep?.title.roll:this._fluxStep?.action?this._fluxStep.action.name:this._fluxStep?.title.roll,oppoRoll:this._oppoRoll.stats.useOppRoll,actor:t,permission:t?.permission===3,warningMe:t?.permission===3&&this._sheet._tabs.find(t=>".tabs_CombatMenu"===t._navSelector)?.active!=="combatant"}}_createDamageAction(t,o,e,a,s,l){if(!t||!o||!e||!s)return;let i={...game.template.Item.action,damage:{noApply:e.system.weapon.damage.noDamage,toOwn:e.system.weapon.damage.own,location:{formula:""!==e.system.weapon.damage.location?e.system.weapon.damage.locationFormula:"1D10"},damage:{base:s.system.damage.base,total:"",impale:s.system.damage.impale},baseMod:{apply:e.system.weapon.damage.damageBon&&s.system.damage.bono,damage:e.system.weapon.damage.damageBon?"+0"!==t.system.attributes.damage.mod?t.system.attributes.damage.value+" "+t.system.attributes.damage.mod:t.system.attributes.damage.value:"+0"},actionMod:{apply:"+0"!==e.system.weapon.damage.mod||"1"!==e.system.weapon.damage.mult,damage:e.system.weapon.damage.mod,mult:e.system.weapon.damage.mult},totalMod:"+0",armor:{apply:!e.system.weapon.damage.noArmor&&!s.system.damage.noArmor}},flow:{useWeapon:!1}};return i.roll.rollTitle=game.i18n.localize("common.applyDamage"),i.damage.totalMod=i.damage.actionMod.apply&&"+0"!==i.damage.actionMod.damage?i.damage.actionMod.damage:"","1"!==i.damage.actionMod.mult&&(i.damage.totalMod="( ... "+i.damage.totalMod+")*"+i.damage.actionMod.mult),i.damage.totalMod+=i.damage.baseMod.apply?" "+i.damage.baseMod.damage:"",i.damage.damage.total=i.damage.damage.base+(i.damage.actionMod.apply&&"+0"!==i.damage.actionMod.damage?" + "+i.damage.actionMod.damage:""),"1"!==i.damage.actionMod.mult&&(i.damage.damage.total="("+i.damage.damage.total+")*"+i.damage.actionMod.mult),i.damage.baseMod.apply&&(i.damage.damage.total+=" "+i.damage.baseMod.damage),{id:"damage",_id:"damage",name:game.i18n.localize("common.applyDamage"),system:i}}_addRollHistory(t,o,e=!1){e?this._antiturnRoll.history.push(game.i18n.localize(t)+(o?': <span class="_value">'+o+"</span>":"")):this._turnRoll.history.push(game.i18n.localize(t)+(o?': <span class="_value">'+o+"</span>":""))}_addRollHistoryError(t,o=!1){this._turnRoll.history.push('<span class="_error">'+game.i18n.localize(t)+"</span>")}_getControl(){this.control.noCombat=!this._combat,this.control.noSteps=0===this._steps.length,this.control.noCombatants=0===this._combatants.length,this.control.txtRound=this._combat&&this._combat.round>0?this._combat.round:game.i18n.localize("common.noStarted"),this.control.showTarget=!!this._turn.step?.target,this.control.noWeapons=!!this._fluxStep&&this._fluxStep.action?.system.weapon.noWeapons,this.control.phase.damage=this._fluxStep?.damageRoll,this.control.phase.damage||(this.control.phase.attacker=!this._fluxStep?.oppoRoll&&this._fluxStep?.attacker,this.control.phase.defender=!this._fluxStep?.oppoRoll&&this._fluxStep?.defender,this.control.phase.oppoRoll=!!this._fluxStep?.oppoRoll),this._turnAction&&""!==this._turnAction?.system.modes.reqAttacker&&(this.control.attacker.noMode=!this._turnActor.system.modes.find(t=>t===this._turnAction.system.modes.reqAttacker),this.control.attacker.modeTxt=game.i18n.localize(CONFIG.ExtendConfig.modes[this._turnAction.system.modes.reqAttacker].label),this.control.noMode=this.control.attacker.noMode,this.control.noModeTxt=this.control.noMode?game.i18n.localize("info.noModeAttacker")+" "+this.control.attacker.modeTxt:""),this._turnAction&&""!==this._turnAction?.system.modes.reqTarget&&(this.control.defender.noMode=!this._antiturnActor?.system.modes.find(t=>t===this._turnAction.system.modes.reqTarget),this.control.defender.modeTxt=game.i18n.localize(CONFIG.ExtendConfig.modes[this._turnAction.system.modes.reqTarget].label),this.control.noMode=!!this.control.noMode||this.control.defender.noMode,this.control.noModeTxt=this.control.noMode?""!==this.control.noModeTxt?this.control.noModeTxt:game.i18n.localize("info.noModeTarget")+" "+this.control.defender.modeTxt:"")}_getSummary(){let t=0,o=this._steps.length>0?this._steps[0].round:0;this._steps.filter(t=>t.type.attack||t.type.movement).map(e=>{let a=this._steps.find(t=>t.targetStepId===e.id),s=game.combat.combatants.get(e.combatantId),l=game.combat.combatants.get(e.targetId),i=s&&e.actionId?s.actor.items.get(e.actionId):null,n=l&&a?.actionId?l.actor.items.get(a.actionId):null,r=e.roll_skill,d=a?.roll_skill,c=e.roll_oppoA,m=e.roll_oppoD,h=e.roll_damage;i?.system.flow.useOppoRoll||n?.system.flow.useOppoRoll;let p=[];t=o!==e.round?0:t++;let u=game.i18n.localize("common.turnNoFinish");e.roll.skill&&!e.roll_skill?.result.result.success?u=game.i18n.localize("common.turnAttackerFailed"):a&&a?.roll.skill&&a.roll_skill&&a.roll_skill?.result.result.success&&(u=game.i18n.localize("common.turnDefenderSuccess")),e.closed&&(u=game.i18n.localize("common.turnEnded")),t++,[r,d,c,m,h].map(t=>{t&&p.push({roll:t?.id==="roll",oppo:t?.id==="oppo",damage:t?.id==="damage",attack:!t?.anti,defense:t?.anti,actor:t?.id!=="roll"||t?.anti?t?.id==="roll"&&t?.anti?l?.actor:t?.id!=="oppo"||t?.anti?t?.id==="oppo"&&t?.anti?l?.actor:t?.id==="damage"?s?.actor:"":s?.actor:s?.actor,title:t?.id==="roll"||t?.id==="oppo"?t.roll.title:t?.id==="damage"?game.i18n.localize("common.damageRoll"):"",subTitle:t?.id!=="roll"||t?.anti?t?.id==="roll"&&t?.anti?n?.name:t?.id!=="oppo"||t?.anti?t?.id==="oppo"&&t?.anti?n?.name:t?.id==="damage"?i?.name:"":i?.name:i?.name,total:t?.id==="roll"||t?.id==="oppo"?t.roll.value:t?.id==="damage"?e.damage.initial.formula:"",roll:t?.id==="roll"||t?.id==="oppo"?Number(t.roll.value)!==Number(t.roll.base)?t.roll.value+"% ("+t.roll.base+"% "+t.roll.totalmod+")":t.roll.base+"%":t?.id==="damage"?e.damage.initial.formula+" ("+e.damage.location.formula+")":"",showRollLevel:t.rollLevel?.id!=="rollNormal",rollLevel:t.rollLevel?.label,result:t?.id==="roll"||t?.id==="oppo"?t.result.nResult:t?.id==="damage"?e.damage.hits:"",resultText:t?.id==="roll"?game.i18n.localize("roll."+t.result.resultClass):t?.id==="oppo"?!t.anti&&e.oppoRoll.attacker.win?" - "+game.i18n.localize("common.victory"):t.anti&&e.oppoRoll.defender.win?" - "+game.i18n.localize("common.victory"):"":"",applyLuck:t.result.luckApply,luckLost:t.result.lost})}),this._summary.push({round:e.round,turn:t,active:e.active,closed:e.closed,combatant:s,combatantActor:s?.actor,target:l,targetActor:l?.actor,combatantAction:i,targetAction:n,flux:p,text:u})})}}